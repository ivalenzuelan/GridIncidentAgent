from datetime import datetime
from typing import List, Optional, Dict
from pydantic import BaseModel, Field

class GridMeasurement(BaseModel):
    """Grid measurement data point."""
    timestamp: datetime
    voltage_magnitude: float
    voltage_angle: float
    bus_id: int

class Outage(BaseModel):
    """Outage information."""
    timestamp: datetime
    station_id: str
    type: str
    duration_min: int
    crew_notes: Optional[str] = None

class WeatherData(BaseModel):
    """Weather data for a location."""
    location: str
    timestamp: datetime
    temperature: float
    humidity: float
    wind_speed: float
    precipitation: float
    conditions: str

class GridReport(BaseModel):
    """Complete grid performance report."""
    report_time: datetime = Field(default_factory=datetime.now)
    time_range_start: datetime
    time_range_end: datetime
    
    # Grid measurements
    measurements: List[GridMeasurement]
    voltage_stats: Dict[str, float]  # min, max, avg, std
    
    # Outages
    active_outages: List[Outage]
    resolved_outages: List[Outage]
    
    # Weather conditions
    weather_data: List[WeatherData]
    
    # Analysis
    grid_status: str  # "normal", "degraded", "critical"
    alerts: List[str]
    recommendations: List[str]
    
    exec_summary: Optional[str] = None  # Executive summary generated by Cloudflare Workers AI
    
    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat()
        } 